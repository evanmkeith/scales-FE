{"ast":null,"code":"import _slicedToArray from \"/Users/evankeith/Documents/FX119/unit-four/deliverables/capstone/scales-FE/scales-fe/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectSpread from \"/Users/evankeith/Documents/FX119/unit-four/deliverables/capstone/scales-FE/scales-fe/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _defineProperty from \"/Users/evankeith/Documents/FX119/unit-four/deliverables/capstone/scales-FE/scales-fe/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _toConsumableArray from \"/Users/evankeith/Documents/FX119/unit-four/deliverables/capstone/scales-FE/scales-fe/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _createForOfIteratorHelper from \"/Users/evankeith/Documents/FX119/unit-four/deliverables/capstone/scales-FE/scales-fe/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _regeneratorRuntime from \"/Users/evankeith/Documents/FX119/unit-four/deliverables/capstone/scales-FE/scales-fe/node_modules/@babel/runtime/regenerator/index.js\";\nimport { isPlainObject } from 'is-plain-object';\n/**\n * Get the type of the given object.\n *\n * @param object - The object to get the type of.\n * @returns The type of the given object.\n */\n\nfunction getObjectType(object) {\n  if (typeof object !== \"object\" || object === null) {\n    return 0\n    /* NOT */\n    ;\n  }\n\n  if (Array.isArray(object)) {\n    return 2\n    /* ARRAY */\n    ;\n  }\n\n  if (isPlainObject(object)) {\n    return 1\n    /* RECORD */\n    ;\n  }\n\n  if (object instanceof Set) {\n    return 3\n    /* SET */\n    ;\n  }\n\n  if (object instanceof Map) {\n    return 4\n    /* MAP */\n    ;\n  }\n\n  return 5\n  /* OTHER */\n  ;\n}\n/**\n * Get the keys of the given objects including symbol keys.\n *\n * Note: Only keys to enumerable properties are returned.\n *\n * @param objects - An array of objects to get the keys of.\n * @returns A set containing all the keys of all the given objects.\n */\n\n\nfunction getKeys(objects) {\n  var keys = new Set();\n  /* eslint-disable functional/no-loop-statement -- using a loop here is more efficient. */\n\n  var _iterator = _createForOfIteratorHelper(objects),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var object = _step.value;\n\n      for (var _i = 0, _arr = [].concat(_toConsumableArray(Object.keys(object)), _toConsumableArray(Object.getOwnPropertySymbols(object))); _i < _arr.length; _i++) {\n        var key = _arr[_i];\n        keys.add(key);\n      }\n    }\n    /* eslint-enable functional/no-loop-statement */\n\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return keys;\n}\n/**\n * Does the given object have the given property.\n *\n * @param object - The object to test.\n * @param property - The property to test.\n * @returns Whether the object has the property.\n */\n\n\nfunction objectHasProperty(object, property) {\n  return typeof object === \"object\" && Object.prototype.propertyIsEnumerable.call(object, property);\n}\n/**\n * Get an iterable object that iterates over the given iterables.\n */\n\n\nfunction getIterableOfIterables(iterables) {\n  return _defineProperty({}, Symbol.iterator, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var _iterator2, _step2, iterable, _iterator3, _step3, value;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            // eslint-disable-next-line functional/no-loop-statement\n            _iterator2 = _createForOfIteratorHelper(iterables);\n            _context.prev = 1;\n\n            _iterator2.s();\n\n          case 3:\n            if ((_step2 = _iterator2.n()).done) {\n              _context.next = 24;\n              break;\n            }\n\n            iterable = _step2.value;\n            // eslint-disable-next-line functional/no-loop-statement\n            _iterator3 = _createForOfIteratorHelper(iterable);\n            _context.prev = 6;\n\n            _iterator3.s();\n\n          case 8:\n            if ((_step3 = _iterator3.n()).done) {\n              _context.next = 14;\n              break;\n            }\n\n            value = _step3.value;\n            _context.next = 12;\n            return value;\n\n          case 12:\n            _context.next = 8;\n            break;\n\n          case 14:\n            _context.next = 19;\n            break;\n\n          case 16:\n            _context.prev = 16;\n            _context.t0 = _context[\"catch\"](6);\n\n            _iterator3.e(_context.t0);\n\n          case 19:\n            _context.prev = 19;\n\n            _iterator3.f();\n\n            return _context.finish(19);\n\n          case 22:\n            _context.next = 3;\n            break;\n\n          case 24:\n            _context.next = 29;\n            break;\n\n          case 26:\n            _context.prev = 26;\n            _context.t1 = _context[\"catch\"](1);\n\n            _iterator2.e(_context.t1);\n\n          case 29:\n            _context.prev = 29;\n\n            _iterator2.f();\n\n            return _context.finish(29);\n\n          case 32:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[1, 26, 29, 32], [6, 16, 19, 22]]);\n  }));\n}\n\nvar defaultMergeFunctions = {\n  mergeMaps: defaultMergeMaps,\n  mergeSets: defaultMergeSets,\n  mergeArrays: defaultMergeArrays,\n  mergeRecords: defaultMergeRecords,\n  mergeOthers: leaf\n};\n/**\n * Special values that tell deepmerge-ts to perform a certain action.\n */\n\nvar actions = {\n  defaultMerge: Symbol(\"deepmerge-ts: default merge\"),\n  skip: Symbol(\"deepmerge-ts: skip\")\n};\n/**\n * The default function to update meta data.\n */\n\nfunction defaultMetaDataUpdater(previousMeta, metaMeta) {\n  return metaMeta;\n}\n/**\n * Deeply merge objects.\n *\n * @param objects - The objects to merge.\n */\n\n\nfunction deepmerge() {\n  return deepmergeCustom({}).apply(void 0, arguments);\n}\n\nfunction deepmergeCustom(options, rootMetaData) {\n  var utils = getUtils(options, customizedDeepmerge);\n  /**\n   * The customized deepmerge function.\n   */\n\n  function customizedDeepmerge() {\n    for (var _len = arguments.length, objects = new Array(_len), _key = 0; _key < _len; _key++) {\n      objects[_key] = arguments[_key];\n    }\n\n    return mergeUnknowns(objects, utils, rootMetaData);\n  }\n\n  return customizedDeepmerge;\n}\n/**\n * The the full options with defaults apply.\n *\n * @param options - The options the user specified\n */\n\n\nfunction getUtils(options, customizedDeepmerge) {\n  var _a, _b;\n\n  return {\n    defaultMergeFunctions: defaultMergeFunctions,\n    mergeFunctions: _objectSpread(_objectSpread({}, defaultMergeFunctions), Object.fromEntries(Object.entries(options).filter(function (_ref2) {\n      var _ref3 = _slicedToArray(_ref2, 2),\n          key = _ref3[0],\n          option = _ref3[1];\n\n      return Object.prototype.hasOwnProperty.call(defaultMergeFunctions, key);\n    }).map(function (_ref4) {\n      var _ref5 = _slicedToArray(_ref4, 2),\n          key = _ref5[0],\n          option = _ref5[1];\n\n      return option === false ? [key, leaf] : [key, option];\n    }))),\n    metaDataUpdater: (_a = options.metaDataUpdater) !== null && _a !== void 0 ? _a : defaultMetaDataUpdater,\n    deepmerge: customizedDeepmerge,\n    useImplicitDefaultMerging: (_b = options.enableImplicitDefaultMerging) !== null && _b !== void 0 ? _b : false,\n    actions: actions\n  };\n}\n/**\n * Merge unknown things.\n *\n * @param values - The values.\n */\n\n\nfunction mergeUnknowns(values, utils, meta) {\n  if (values.length === 0) {\n    return undefined;\n  }\n\n  if (values.length === 1) {\n    return mergeOthers(values, utils, meta);\n  }\n\n  var type = getObjectType(values[0]); // eslint-disable-next-line functional/no-conditional-statement -- add an early escape for better performance.\n\n  if (type !== 0\n  /* NOT */\n  && type !== 5\n  /* OTHER */\n  ) {\n    // eslint-disable-next-line functional/no-loop-statement -- using a loop here is more performant than mapping every value and then testing every value.\n    for (var mutableIndex = 1; mutableIndex < values.length; mutableIndex++) {\n      if (getObjectType(values[mutableIndex]) === type) {\n        continue;\n      }\n\n      return mergeOthers(values, utils, meta);\n    }\n  }\n\n  switch (type) {\n    case 1\n    /* RECORD */\n    :\n      return mergeRecords(values, utils, meta);\n\n    case 2\n    /* ARRAY */\n    :\n      return mergeArrays(values, utils, meta);\n\n    case 3\n    /* SET */\n    :\n      return mergeSets(values, utils, meta);\n\n    case 4\n    /* MAP */\n    :\n      return mergeMaps(values, utils, meta);\n\n    default:\n      return mergeOthers(values, utils, meta);\n  }\n}\n/**\n * Merge records.\n *\n * @param values - The records.\n */\n\n\nfunction mergeRecords(values, utils, meta) {\n  var result = utils.mergeFunctions.mergeRecords(values, utils, meta);\n\n  if (result === actions.defaultMerge || utils.useImplicitDefaultMerging && result === undefined && utils.mergeFunctions.mergeRecords !== utils.defaultMergeFunctions.mergeRecords) {\n    return utils.defaultMergeFunctions.mergeRecords(values, utils, meta);\n  }\n\n  return result;\n}\n/**\n * Merge arrays.\n *\n * @param values - The arrays.\n */\n\n\nfunction mergeArrays(values, utils, meta) {\n  var result = utils.mergeFunctions.mergeArrays(values, utils, meta);\n\n  if (result === actions.defaultMerge || utils.useImplicitDefaultMerging && result === undefined && utils.mergeFunctions.mergeArrays !== utils.defaultMergeFunctions.mergeArrays) {\n    return utils.defaultMergeFunctions.mergeArrays(values);\n  }\n\n  return result;\n}\n/**\n * Merge sets.\n *\n * @param values - The sets.\n */\n\n\nfunction mergeSets(values, utils, meta) {\n  var result = utils.mergeFunctions.mergeSets(values, utils, meta);\n\n  if (result === actions.defaultMerge || utils.useImplicitDefaultMerging && result === undefined && utils.mergeFunctions.mergeSets !== utils.defaultMergeFunctions.mergeSets) {\n    return utils.defaultMergeFunctions.mergeSets(values);\n  }\n\n  return result;\n}\n/**\n * Merge maps.\n *\n * @param values - The maps.\n */\n\n\nfunction mergeMaps(values, utils, meta) {\n  var result = utils.mergeFunctions.mergeMaps(values, utils, meta);\n\n  if (result === actions.defaultMerge || utils.useImplicitDefaultMerging && result === undefined && utils.mergeFunctions.mergeMaps !== utils.defaultMergeFunctions.mergeMaps) {\n    return utils.defaultMergeFunctions.mergeMaps(values);\n  }\n\n  return result;\n}\n/**\n * Merge other things.\n *\n * @param values - The other things.\n */\n\n\nfunction mergeOthers(values, utils, meta) {\n  var result = utils.mergeFunctions.mergeOthers(values, utils, meta);\n\n  if (result === actions.defaultMerge || utils.useImplicitDefaultMerging && result === undefined && utils.mergeFunctions.mergeOthers !== utils.defaultMergeFunctions.mergeOthers) {\n    return utils.defaultMergeFunctions.mergeOthers(values);\n  }\n\n  return result;\n}\n/**\n * The default strategy to merge records.\n *\n * @param values - The records.\n */\n\n\nfunction defaultMergeRecords(values, utils, meta) {\n  var result = {};\n  /* eslint-disable functional/no-loop-statement, functional/no-conditional-statement -- using a loop here is more performant. */\n\n  var _iterator4 = _createForOfIteratorHelper(getKeys(values)),\n      _step4;\n\n  try {\n    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n      var key = _step4.value;\n      var propValues = [];\n\n      var _iterator5 = _createForOfIteratorHelper(values),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var value = _step5.value;\n\n          if (objectHasProperty(value, key)) {\n            propValues.push(value[key]);\n          }\n        } // assert(propValues.length > 0);\n\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n\n      var updatedMeta = utils.metaDataUpdater(meta, {\n        key: key,\n        parents: values\n      });\n      var propertyResult = mergeUnknowns(propValues, utils, updatedMeta);\n\n      if (propertyResult === actions.skip) {\n        continue;\n      }\n\n      if (key === \"__proto__\") {\n        Object.defineProperty(result, key, {\n          value: propertyResult,\n          configurable: true,\n          enumerable: true,\n          writable: true\n        });\n      } else {\n        result[key] = propertyResult;\n      }\n    }\n    /* eslint-enable functional/no-loop-statement, functional/no-conditional-statement */\n\n  } catch (err) {\n    _iterator4.e(err);\n  } finally {\n    _iterator4.f();\n  }\n\n  return result;\n}\n/**\n * The default strategy to merge arrays.\n *\n * @param values - The arrays.\n */\n\n\nfunction defaultMergeArrays(values) {\n  return values.flat();\n}\n/**\n * The default strategy to merge sets.\n *\n * @param values - The sets.\n */\n\n\nfunction defaultMergeSets(values) {\n  return new Set(getIterableOfIterables(values));\n}\n/**\n * The default strategy to merge maps.\n *\n * @param values - The maps.\n */\n\n\nfunction defaultMergeMaps(values) {\n  return new Map(getIterableOfIterables(values));\n}\n/**\n * Get the last value in the given array.\n */\n\n\nfunction leaf(values) {\n  return values[values.length - 1];\n}\n\nexport { deepmerge, deepmergeCustom };","map":{"version":3,"names":["isPlainObject","getObjectType","object","Array","isArray","Set","Map","getKeys","objects","keys","Object","getOwnPropertySymbols","key","add","objectHasProperty","property","prototype","propertyIsEnumerable","call","getIterableOfIterables","iterables","Symbol","iterator","iterable","value","defaultMergeFunctions","mergeMaps","defaultMergeMaps","mergeSets","defaultMergeSets","mergeArrays","defaultMergeArrays","mergeRecords","defaultMergeRecords","mergeOthers","leaf","actions","defaultMerge","skip","defaultMetaDataUpdater","previousMeta","metaMeta","deepmerge","deepmergeCustom","options","rootMetaData","utils","getUtils","customizedDeepmerge","mergeUnknowns","_a","_b","mergeFunctions","fromEntries","entries","filter","option","hasOwnProperty","map","metaDataUpdater","useImplicitDefaultMerging","enableImplicitDefaultMerging","values","meta","length","undefined","type","mutableIndex","result","propValues","push","updatedMeta","parents","propertyResult","defineProperty","configurable","enumerable","writable","flat"],"sources":["/Users/evankeith/Documents/FX119/unit-four/deliverables/capstone/scales-FE/scales-fe/node_modules/deepmerge-ts/dist/node/index.mjs"],"sourcesContent":["import { isPlainObject } from 'is-plain-object';\n\n/**\n * Get the type of the given object.\n *\n * @param object - The object to get the type of.\n * @returns The type of the given object.\n */\nfunction getObjectType(object) {\n    if (typeof object !== \"object\" || object === null) {\n        return 0 /* NOT */;\n    }\n    if (Array.isArray(object)) {\n        return 2 /* ARRAY */;\n    }\n    if (isPlainObject(object)) {\n        return 1 /* RECORD */;\n    }\n    if (object instanceof Set) {\n        return 3 /* SET */;\n    }\n    if (object instanceof Map) {\n        return 4 /* MAP */;\n    }\n    return 5 /* OTHER */;\n}\n/**\n * Get the keys of the given objects including symbol keys.\n *\n * Note: Only keys to enumerable properties are returned.\n *\n * @param objects - An array of objects to get the keys of.\n * @returns A set containing all the keys of all the given objects.\n */\nfunction getKeys(objects) {\n    const keys = new Set();\n    /* eslint-disable functional/no-loop-statement -- using a loop here is more efficient. */\n    for (const object of objects) {\n        for (const key of [\n            ...Object.keys(object),\n            ...Object.getOwnPropertySymbols(object),\n        ]) {\n            keys.add(key);\n        }\n    }\n    /* eslint-enable functional/no-loop-statement */\n    return keys;\n}\n/**\n * Does the given object have the given property.\n *\n * @param object - The object to test.\n * @param property - The property to test.\n * @returns Whether the object has the property.\n */\nfunction objectHasProperty(object, property) {\n    return (typeof object === \"object\" &&\n        Object.prototype.propertyIsEnumerable.call(object, property));\n}\n/**\n * Get an iterable object that iterates over the given iterables.\n */\nfunction getIterableOfIterables(iterables) {\n    return {\n        *[Symbol.iterator]() {\n            // eslint-disable-next-line functional/no-loop-statement\n            for (const iterable of iterables) {\n                // eslint-disable-next-line functional/no-loop-statement\n                for (const value of iterable) {\n                    yield value;\n                }\n            }\n        },\n    };\n}\n\nconst defaultMergeFunctions = {\n    mergeMaps: defaultMergeMaps,\n    mergeSets: defaultMergeSets,\n    mergeArrays: defaultMergeArrays,\n    mergeRecords: defaultMergeRecords,\n    mergeOthers: leaf,\n};\n/**\n * Special values that tell deepmerge-ts to perform a certain action.\n */\nconst actions = {\n    defaultMerge: Symbol(\"deepmerge-ts: default merge\"),\n    skip: Symbol(\"deepmerge-ts: skip\"),\n};\n/**\n * The default function to update meta data.\n */\nfunction defaultMetaDataUpdater(previousMeta, metaMeta) {\n    return metaMeta;\n}\n/**\n * Deeply merge objects.\n *\n * @param objects - The objects to merge.\n */\nfunction deepmerge(...objects) {\n    return deepmergeCustom({})(...objects);\n}\nfunction deepmergeCustom(options, rootMetaData) {\n    const utils = getUtils(options, customizedDeepmerge);\n    /**\n     * The customized deepmerge function.\n     */\n    function customizedDeepmerge(...objects) {\n        return mergeUnknowns(objects, utils, rootMetaData);\n    }\n    return customizedDeepmerge;\n}\n/**\n * The the full options with defaults apply.\n *\n * @param options - The options the user specified\n */\nfunction getUtils(options, customizedDeepmerge) {\n    var _a, _b;\n    return {\n        defaultMergeFunctions,\n        mergeFunctions: {\n            ...defaultMergeFunctions,\n            ...Object.fromEntries(Object.entries(options)\n                .filter(([key, option]) => Object.prototype.hasOwnProperty.call(defaultMergeFunctions, key))\n                .map(([key, option]) => option === false ? [key, leaf] : [key, option])),\n        },\n        metaDataUpdater: ((_a = options.metaDataUpdater) !== null && _a !== void 0 ? _a : defaultMetaDataUpdater),\n        deepmerge: customizedDeepmerge,\n        useImplicitDefaultMerging: (_b = options.enableImplicitDefaultMerging) !== null && _b !== void 0 ? _b : false,\n        actions,\n    };\n}\n/**\n * Merge unknown things.\n *\n * @param values - The values.\n */\nfunction mergeUnknowns(values, utils, meta) {\n    if (values.length === 0) {\n        return undefined;\n    }\n    if (values.length === 1) {\n        return mergeOthers(values, utils, meta);\n    }\n    const type = getObjectType(values[0]);\n    // eslint-disable-next-line functional/no-conditional-statement -- add an early escape for better performance.\n    if (type !== 0 /* NOT */ && type !== 5 /* OTHER */) {\n        // eslint-disable-next-line functional/no-loop-statement -- using a loop here is more performant than mapping every value and then testing every value.\n        for (let mutableIndex = 1; mutableIndex < values.length; mutableIndex++) {\n            if (getObjectType(values[mutableIndex]) === type) {\n                continue;\n            }\n            return mergeOthers(values, utils, meta);\n        }\n    }\n    switch (type) {\n        case 1 /* RECORD */:\n            return mergeRecords(values, utils, meta);\n        case 2 /* ARRAY */:\n            return mergeArrays(values, utils, meta);\n        case 3 /* SET */:\n            return mergeSets(values, utils, meta);\n        case 4 /* MAP */:\n            return mergeMaps(values, utils, meta);\n        default:\n            return mergeOthers(values, utils, meta);\n    }\n}\n/**\n * Merge records.\n *\n * @param values - The records.\n */\nfunction mergeRecords(values, utils, meta) {\n    const result = utils.mergeFunctions.mergeRecords(values, utils, meta);\n    if (result === actions.defaultMerge ||\n        (utils.useImplicitDefaultMerging &&\n            result === undefined &&\n            utils.mergeFunctions.mergeRecords !==\n                utils.defaultMergeFunctions.mergeRecords)) {\n        return utils.defaultMergeFunctions.mergeRecords(values, utils, meta);\n    }\n    return result;\n}\n/**\n * Merge arrays.\n *\n * @param values - The arrays.\n */\nfunction mergeArrays(values, utils, meta) {\n    const result = utils.mergeFunctions.mergeArrays(values, utils, meta);\n    if (result === actions.defaultMerge ||\n        (utils.useImplicitDefaultMerging &&\n            result === undefined &&\n            utils.mergeFunctions.mergeArrays !==\n                utils.defaultMergeFunctions.mergeArrays)) {\n        return utils.defaultMergeFunctions.mergeArrays(values);\n    }\n    return result;\n}\n/**\n * Merge sets.\n *\n * @param values - The sets.\n */\nfunction mergeSets(values, utils, meta) {\n    const result = utils.mergeFunctions.mergeSets(values, utils, meta);\n    if (result === actions.defaultMerge ||\n        (utils.useImplicitDefaultMerging &&\n            result === undefined &&\n            utils.mergeFunctions.mergeSets !== utils.defaultMergeFunctions.mergeSets)) {\n        return utils.defaultMergeFunctions.mergeSets(values);\n    }\n    return result;\n}\n/**\n * Merge maps.\n *\n * @param values - The maps.\n */\nfunction mergeMaps(values, utils, meta) {\n    const result = utils.mergeFunctions.mergeMaps(values, utils, meta);\n    if (result === actions.defaultMerge ||\n        (utils.useImplicitDefaultMerging &&\n            result === undefined &&\n            utils.mergeFunctions.mergeMaps !== utils.defaultMergeFunctions.mergeMaps)) {\n        return utils.defaultMergeFunctions.mergeMaps(values);\n    }\n    return result;\n}\n/**\n * Merge other things.\n *\n * @param values - The other things.\n */\nfunction mergeOthers(values, utils, meta) {\n    const result = utils.mergeFunctions.mergeOthers(values, utils, meta);\n    if (result === actions.defaultMerge ||\n        (utils.useImplicitDefaultMerging &&\n            result === undefined &&\n            utils.mergeFunctions.mergeOthers !==\n                utils.defaultMergeFunctions.mergeOthers)) {\n        return utils.defaultMergeFunctions.mergeOthers(values);\n    }\n    return result;\n}\n/**\n * The default strategy to merge records.\n *\n * @param values - The records.\n */\nfunction defaultMergeRecords(values, utils, meta) {\n    const result = {};\n    /* eslint-disable functional/no-loop-statement, functional/no-conditional-statement -- using a loop here is more performant. */\n    for (const key of getKeys(values)) {\n        const propValues = [];\n        for (const value of values) {\n            if (objectHasProperty(value, key)) {\n                propValues.push(value[key]);\n            }\n        }\n        // assert(propValues.length > 0);\n        const updatedMeta = utils.metaDataUpdater(meta, {\n            key,\n            parents: values,\n        });\n        const propertyResult = mergeUnknowns(propValues, utils, updatedMeta);\n        if (propertyResult === actions.skip) {\n            continue;\n        }\n        if (key === \"__proto__\") {\n            Object.defineProperty(result, key, {\n                value: propertyResult,\n                configurable: true,\n                enumerable: true,\n                writable: true,\n            });\n        }\n        else {\n            result[key] = propertyResult;\n        }\n    }\n    /* eslint-enable functional/no-loop-statement, functional/no-conditional-statement */\n    return result;\n}\n/**\n * The default strategy to merge arrays.\n *\n * @param values - The arrays.\n */\nfunction defaultMergeArrays(values) {\n    return values.flat();\n}\n/**\n * The default strategy to merge sets.\n *\n * @param values - The sets.\n */\nfunction defaultMergeSets(values) {\n    return new Set(getIterableOfIterables(values));\n}\n/**\n * The default strategy to merge maps.\n *\n * @param values - The maps.\n */\nfunction defaultMergeMaps(values) {\n    return new Map(getIterableOfIterables(values));\n}\n/**\n * Get the last value in the given array.\n */\nfunction leaf(values) {\n    return values[values.length - 1];\n}\n\nexport { deepmerge, deepmergeCustom };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}